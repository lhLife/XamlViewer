<Page x:Class="XamlViewer.Presentation.MainPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:controls="using:CommunityToolkit.WinUI.Controls"
      xmlns:core="using:Microsoft.Xaml.Interactions.Core"
      xmlns:interactivity="using:Microsoft.Xaml.Interactivity" xmlns:lc="using:XamlViewer.Controls"
      xmlns:local="using:XamlViewer.Presentation" xmlns:model="using:XamlViewer.Models"
      xmlns:uen="using:Uno.Extensions.Navigation.UI" xmlns:ui="using:CommunityToolkit.WinUI"
      xmlns:utu="using:Uno.Toolkit.UI"
      Background="{ThemeResource ApplicationPageBackgroundThemeBrush}"
      NavigationCacheMode="Required">
  <Grid utu:SafeArea.Insets="VisibleBounds">
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto" />
      <RowDefinition />
    </Grid.RowDefinitions>
    <CommandBar Grid.Row="0" DefaultLabelPosition="Right" IsDynamicOverflowEnabled="False">
      <AppBarButton x:Name="mainBack"
                    Command="{Binding ClearWorkCommand}"
                    Icon="Back" Label="返回" Visibility="Collapsed" />
      <AppBarButton AllowFocusOnInteraction="True"
                    Command="{Binding ReaderXamlCommand}"
                    Icon="Play" Label="运行">
        <AppBarButton.KeyboardAccelerators>
          <KeyboardAccelerator Key="F5" />
        </AppBarButton.KeyboardAccelerators>
      </AppBarButton>

      <AppBarSeparator />
      <AppBarButton Icon="Add" Label="添加">
        <AppBarButton.Flyout>
          <MenuFlyout Placement="BottomEdgeAlignedLeft">
            <MenuFlyoutItem Command="{Binding AddCommand}" Text="快速添加">
              <MenuFlyoutItem.KeyboardAccelerators>
                <KeyboardAccelerator Key="N" Modifiers="Control" />
              </MenuFlyoutItem.KeyboardAccelerators>
            </MenuFlyoutItem>
            <MenuFlyoutItem Command="{Binding AddFileCommand}" Text="添加文件">
              <MenuFlyoutItem.KeyboardAccelerators>
                <KeyboardAccelerator Key="N" Modifiers="Control,Shift" />
              </MenuFlyoutItem.KeyboardAccelerators>
            </MenuFlyoutItem>
          </MenuFlyout>
        </AppBarButton.Flyout>
      </AppBarButton>
      <AppBarButton Command="{Binding SettingCommand}"
                    Icon="Setting" Label="设置" />
      <AppBarSeparator />
      <AppBarToggleButton Command="{Binding PinCommand}"
                          CommandParameter="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}"
                          Icon="{ui:FontIcon FontFamily={StaticResource SymbolThemeFontFamily},
                                             Glyph='&#xE768;'}"
                          Label="置顶" />

      <AppBarToggleButton Icon="{ui:FontIcon FontFamily={StaticResource SymbolThemeFontFamily},
                                             Glyph='&#xE8F9;'}"
                          IsChecked="{Binding ListDetailMode, Mode=TwoWay}"
                          Label="视图" />

      <AppBarButton Command="{Binding SwitchSplitCommand}"
                    Icon="{ui:FontIcon FontFamily={StaticResource SymbolThemeFontFamily},
                                       Glyph='&#xEB91;'}"
                    Label="拆分切换" />
    </CommandBar>


    <!--  通过切换app大小来适配显示的界面效果，小：列表明细模式，大：tabview模式  -->
    <controls:SwitchPresenter Grid.Row="1" TargetType="x:Boolean"
                              Value="{Binding ListDetailMode, Mode=OneWay}">
      <controls:Case Value="True">

        <TwoPaneView x:Name="mainTwoPaneView"
                     Background="{ThemeResource CardBackgroundFillColorDefaultBrush}"
                     MinTallModeHeight="{StaticResource DoublePositiveInfinity}"
                     Pane1Length="200" PanePriority="Pane1">
          <TwoPaneView.Pane1>
            <ListView x:Name="mainList"
                      ItemsSource="{Binding Works}"
                      SelectedItem="{Binding SelectedWork, Mode=TwoWay}">
              <ListView.ItemsPanel>
                <ItemsPanelTemplate>
                  <ItemsStackPanel Orientation="Vertical" />

                </ItemsPanelTemplate>
              </ListView.ItemsPanel>
              <ListView.ItemTemplate>
                <DataTemplate x:DataType="local:WorkViewModel">
                  <Grid ColumnDefinitions="*,Auto">
                    <StackPanel Grid.Column="0" Orientation="Horizontal" Spacing="5">
                      <IconSourceElement IconSource="{x:Bind Icon}" />
                      <TextBlock VerticalAlignment="Center" Text="{x:Bind Title}" />
                    </StackPanel>
                    <Button Grid.Column="1"
                            Command="{utu:ItemsControlBinding Path=DataContext.CloseCommand}"
                            CommandParameter="{x:Bind}"
                            Style="{StaticResource AlternateCloseButtonStyle}" />
                  </Grid>
                </DataTemplate>
              </ListView.ItemTemplate>
            </ListView>
          </TwoPaneView.Pane1>
          <TwoPaneView.Pane2>
            <controls:SwitchPresenter TargetType="x:Boolean" Value="{Binding SelectedWork, Mode=OneWay, Converter={StaticResource EmptyStringToObjectConverter}}">
              <controls:Case Value="True">
                <local:WorkPage DataContext="{Binding SelectedWork, Mode=OneWay}" />
              </controls:Case>
              <controls:Case Value="False">
                <TextBlock Text="没有选中的视图" />
              </controls:Case>
            </controls:SwitchPresenter>

          </TwoPaneView.Pane2>
        </TwoPaneView>


      </controls:Case>
      <controls:Case IsDefault="True">
        <TabView Grid.Row="1" Padding="0" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                 AddTabButtonCommand="{Binding AddCommand}"
                 SelectedItem="{Binding SelectedWork, Mode=TwoWay}"
                 TabItemsSource="{Binding Works}"
                 TabWidthMode="Equal">
          <interactivity:Interaction.Behaviors>
            <core:EventTriggerBehavior EventName="TabCloseRequested">
              <core:InvokeCommandAction Command="{Binding CloseCommand}" />
            </core:EventTriggerBehavior>
          </interactivity:Interaction.Behaviors>
          <TabView.TabItemTemplate>
            <DataTemplate x:DataType="local:WorkViewModel">
              <TabViewItem Header="{x:Bind Title}" IconSource="{x:Bind Icon}">
                <local:WorkPage DataContext="{x:Bind}" />
              </TabViewItem>
            </DataTemplate>
          </TabView.TabItemTemplate>
        </TabView>
      </controls:Case>

    </controls:SwitchPresenter>



    <VisualStateManager.VisualStateGroups>
      <VisualStateGroup>
        <VisualState x:Name="pane">
          <VisualState.StateTriggers>
            <ui:IsNotEqualStateTrigger Value="{Binding SelectedWork, Mode=OneWay}" To="{x:Null}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="mainTwoPaneView.PanePriority" Value="Pane2" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>

      <VisualStateGroup>
        <VisualState x:Name="navigation_selected">
          <VisualState.StateTriggers>
            <lc:CompositeStateTrigger DataContext="{Binding}" Operator="And">
              <lc:NotEqualStateTrigger NotEqualTo="{x:Null}" Value="{Binding SelectedWork, Mode=OneWay}" />
              <lc:EqualsStateTrigger EqualTo="SinglePane" Value="{Binding Mode, ElementName=mainTwoPaneView, Mode=OneWay}" />
              <lc:EqualsStateTrigger EqualTo="True" Value="{Binding ListDetailMode, Mode=OneWay}" />
            </lc:CompositeStateTrigger>
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="mainBack.Visibility" Value="Visible" />
          </VisualState.Setters>
        </VisualState>
        <VisualState x:Name="navigation_noselected">
          <VisualState.StateTriggers>
            <ui:IsEqualStateTrigger Value="{Binding SelectedWork, Mode=OneWay}" To="{x:Null}" />
          </VisualState.StateTriggers>
          <VisualState.Setters>
            <Setter Target="mainBack.Visibility" Value="Collapsed" />
          </VisualState.Setters>
        </VisualState>
      </VisualStateGroup>
    </VisualStateManager.VisualStateGroups>
  </Grid>
</Page>
